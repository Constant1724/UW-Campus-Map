CSE 331 Homework 2.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Haopeng Zhou

Problem 0.

(a)
    r = p * q:
    initialize variable r to be empty.
    foreach term t_p in p:
        create a variable temp
        foreach term t_q in q:
            insert a new term in temp, whose coefficient is the product of coefficient of t_p and t_q
            and whose degree is the sum of degree of t_p and t_q
        use algorithm for polynomial addition to add temp to r, and assign the result back to r.
(b)
    r = p / q:
    create variable remainder = p by making a term-by-term copy of all terms in p to remainder.
    create variable quotient and initialize it to be empty
    while ( highest degree of remainder >= highest degree of q):
        create variable temp, whose coefficient is the coefficient of the highest degree term in remainder /
        the coefficient of the highest degree term in q, whose degree is highest degree of remainder - highest degree of
        q.
        let temp2 be the production of temp and q, by polynomial multiplication algorithm defined in part(a).
            (Note that, in this case temp should be interpreted as a single-term polynomial, to keep type consistent)
        foreach term temp2_ in temp2:
            Replace the coefficient of temp2_ be -1 * original coefficient of temp2_
        insert temp into the quotient variable.
        let remainder be the sum of temp2 and remainder, by polynomial addition algorithm.
(c)
    p = (x^3 + x - 1)
    q = (x + 1)

    remainder = copy of p = (x^3 + x - 1)
    quotient = empty
    while [highest degree of remainder >= highest degree of q] :
        Iteration1: while loop is YES,since 3 >= 1. remainder = (x^3 + x - 1), quotient = empty,
            [coefficient = 1 / 1 = 1. Degree = 3 - 1 = 2] temp = x^2.
            [Multiply temp and q by polynomial Multiplication algorithm] temp2 = (x + 1) * (x^2) = x^3 + x^2
            foreach term temp2_ in temp2 :
                iteration1_1 [temp2_ = x^3]:
                    temp2_ = -1 * x^3, so now temp2 = -x^3 + x^2
                iteration1_2 [temp2_ = x^2]:
                    temp2_ = -1 * x^2, so now temp2 = -x^3 - x^2
            [insert temp into the quotient variable.] quotient = x^2
            [let remainder be the sum of temp2 and remainder, by polynomial addition algorithm.] remainder =
            (x^3 + x - 1) + (-x^3 - x^2) = -x^2 + x - 1

        Iteration2: while loop is YES,since 2 >= 1. remainder = (-x^2 + x - 1), quotient = x^2,
            [coefficient = -1 / 1 = 1. Degree = 2 - 1 = 1] temp = -x.
            [Multiply temp and q by polynomial Multiplication algorithm] temp2 = (x + 1) * (-x) = -x^2 - x
            foreach term temp2_ in temp2 :
                iteration1_1 [temp2_ = -x^2]:
                    temp2_ = -1 * -x^2, so now temp2 = x^2 - x
                iteration1_2 [temp2_ = -x]:
                    temp2_ = -1 * -x, so now temp2 = x^2 + x
            [insert temp into the quotient variable.] quotient = x^2 - x
            [let remainder be the sum of temp2 and remainder, by polynomial addition algorithm.] remainder =
            (-x^2 + x - 1) + (x^2 + x) = 2x - 1

        Iteration3: while loop is YES,since 1 >= 1. remainder = (2x - 1), quotient = x^2 - x,
            [coefficient = 2 / 1 = 2. Degree = 1 - 1 = 0] temp = 2.
            [Multiply temp and q by polynomial Multiplication algorithm] temp2 = (x + 1) * (2) = 2x + 1
            foreach term temp2_ in temp2 :
                iteration1_1 [temp2_ = 2x]:
                    temp2_ = -1 * 2x, so now temp2 = -2x + 1
                iteration1_2 [temp2_ = 1]:
                    temp2_ = -1 * 1, so now temp2 = -2x - 1
            [insert temp into the quotient variable.] quotient = x^2 - x + 2
            [let remainder be the sum of temp2 and remainder, by polynomial addition algorithm.] remainder =
            (2x - 1) + (-2x - 1) = -2

        Iteration3: while loop is NO,since 0 >= 1 is wrong. remainder = (-2), quotient = x^2 - x + 2

    We are done, so quotient = x^2 - x + 2


Problem 1.

(a)
For hashCode and equals and toString, we have to turn numer and denom into reduced forms first, which adds a little
complex for reading the code. Moreover, running will be slower, since it needs to do more work (turn into reduce form).

For checkRep, we can just remove the part check if it is in reduced form. Code will run faster, since it does less work.

(b)
It violates the immutability property of the ratNum class, which says all operation should create new instance instead
of modifying existing one.
Moreover, the implementation behavior is different from spec. Particularly, according to spec, the behavior should not
have any side effects, while the implementation does modify this.

(c)
The reason is that the ratNum class is immutable. Once the instance is created, the fields can no longer be changed.
Any attempts will cause compile-time error, since fields are declared as final.

Problem 2.

(a)
I call the checkRep at the end of the constructor, the reason is similar to P1 part(c): the RatTerm class is immutable,
there is no way for client to change it. Any attempts will cause compile-time error, as fields are declared as final.


(b)
HashCode, equals and toString need to be changed. Specifically, we need to insert code that checks if a ratTerm is
mathematically zero and if it is mathematically zero, use ratTerm.ZERO in the following code. It will add a little extra
code and will run a little bit slower, since it has more things to check for now.

(c)
Actually nothing have to be changed, because a stronger spec can be substituted with a weaker one.
I think the second is better: according to spec, it is required that ratTerm with 0 coefficient should have 0 expt,
however, spec does not say anything about expt of Nan, so the first will be redundant and unnecessary.


Problem 5.

CSE 331 Homework 3.  Answers to Written questions.
Edit this file to supply your answers.

Name:  Haopeng Zhou

Problem 1. (Written exercises)

(a)
    IntQueue1:
        Abstraction function:
            IntQueue1, q, holds a queue of elements, maintains the order of insertion in entries.
            Specifically, the i-th element in q.entries should be the i-th element to be returned.
            For example, q.entries.get(0) should be the first to be returned,
            and q.entries.get(1) should be the second to be returned, etc.

        Representation Invariant:
            entries != null &&
            forall i such that (0 <= i < entries.size()): entries.get(i) != null

            In other words:
            entries should not be null and there should not be null elements inside the entries.

    IntQueue2:
        Abstraction function:
            IntQueue2, q, holds a queue of elements, maintains the order of insertion in entries.
            q.size indicates the total number of elements in the IntQueue2.
            q.front indicates the starting index of the current IntQueue2 in entries.
            Specifically, the i-th element should be q.entries.[(i + q.front) % q.entries.length], if i < q.size.

        Representation Invariant:
            entries != null &&
            0 <= size <= entries.length &&
            0 <= front < entries.length &&
            forall i such that (0 <= i < size): entries[(i + q.front) % q.entries.length] != null

            In other words: 
            size and front should be non-negative and size should be no larger than entries.length
            and front should be strictly less than entries.length. Furthermore, all elements in the queue represented
            by IntQueue2 should not be null.	
            
(b)
    Group1: a, d, g. Abstract state: [1 2]
    
    Group2: b, h     Abstract state: [2 3 4]
    
    Group3: c,f      Abstract state: [3 1 2]
    
    Group4: e        Abstract state: [1 2 3 4]

(c)
    1. Representation exposure should be impossible, since either input or output is int primitive type which is immutable. There is no way to expose.
    
    2. Representation exposure is possible, since the return type is inference type and clients thus have the access. 
    Assume the decoded list of string is used elsewhere in its class: client can modify it and incur unexpected result.
    
    3. Normally, representation exposure is not possible, even though it returns a pointer, because the method is private, client should not see it.
    The only way to expose it is to have other public methods call it and directly return the result.
    
    4. Representation exposure should be impossible, even though it returns a pointer, because String is immutable. If client modifies it, the client
    is modifying its copy.
    
    5. It should not possibly expose the representation, since all methods of iterator only returns the element. Moreover, the element in this case, 
    is Integer, which is immutable, so client cannot change it.
    
    6. Representation exposure is possible, if the constructor does not create a shallow copy of the list or if Card is a mutable ADT. In either way, 
    client may hold the referrence to the list or card inside the list and any change may incur unexpected result.


Problem 2.  (Graph interface/operations)



Problem 3.  (Testing strategy)




